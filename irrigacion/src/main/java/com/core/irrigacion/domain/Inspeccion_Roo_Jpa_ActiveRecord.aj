// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.core.irrigacion.domain;

import com.core.irrigacion.domain.Inspeccion;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Inspeccion_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Inspeccion.entityManager;
    
    public static final List<String> Inspeccion.fieldNames4OrderClauseFilter = java.util.Arrays.asList("fechaInspeccion", "numInspeccion", "empresa", "inspeccionAnt", "horaInicio", "horaFin", "estado", "observacion", "inspector", "items", "matafuego", "fechaBaja", "fechaAlta", "fechaInspeccionStr");
    
    public static final EntityManager Inspeccion.entityManager() {
        EntityManager em = new Inspeccion().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Inspeccion.countInspeccions() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Inspeccion o", Long.class).getSingleResult();
    }
    
    public static List<Inspeccion> Inspeccion.findAllInspeccions() {
        return entityManager().createQuery("SELECT o FROM Inspeccion o", Inspeccion.class).getResultList();
    }
    
    public static List<Inspeccion> Inspeccion.findAllInspeccions(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Inspeccion o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Inspeccion.class).getResultList();
    }
    
    public static Inspeccion Inspeccion.findInspeccion(Long id) {
        if (id == null) return null;
        return entityManager().find(Inspeccion.class, id);
    }
    
    public static List<Inspeccion> Inspeccion.findInspeccionEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Inspeccion o", Inspeccion.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Inspeccion> Inspeccion.findInspeccionEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Inspeccion o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Inspeccion.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Inspeccion.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Inspeccion.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Inspeccion attached = Inspeccion.findInspeccion(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Inspeccion.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Inspeccion.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Inspeccion Inspeccion.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Inspeccion merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
